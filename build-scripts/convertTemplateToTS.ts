/**
 * Copies template HTML files and converts them to TypeScript modules.
 */

import { promises } from "fs";
import { minify } from "html-minifier";
import { basename, resolve } from "path";

const { readdir, readFile, writeFile } = promises;

const templatesDir = resolve(__dirname, "..", "src", "browser", "Templates");

(async () => {
  const files = await readdir(templatesDir);

  if (files.length === 0) {
    console.warn(`No files were found in ${templatesDir}`);
  }
  const outObj: { [key: string]: string } = {};
  for (const file of files) {
    const filename = resolve(templatesDir, file);
    console.log(`Processing ${filename}...`);
    const data = await readFile(filename);
    const content = minify(data.toString(), {
      collapseWhitespace: true
    });
    const key = basename(file, ".html");
    outObj[key] = content;
  }

  const outDir = resolve(templatesDir, "..");
  const outFile = resolve(outDir, "templates.ts");
  const outText = `// This file was autogenerated and should not be stored in the code repository.
  export default ${JSON.stringify(outObj)}`;
  try {
    writeFile(outFile, outText);
  } catch (writeErr) {
    console.error(writeErr);
  }
})();
